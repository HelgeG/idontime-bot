#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'
require 'optparse'
require_relative 'id_dsl'
require_relative 'working_days'

PROPERTIES_FILE = 'idontime.yaml'

options = YAML.safe_load(File.read(PROPERTIES_FILE), [Symbol])
options ||= {}

option_parser = OptionParser.new do |opts|
  opts.on('-h', '--headless') { options[:headless] = true }
  opts.on('-i IN', '--in IN', /^[0-2]\d:[0-5]\d$/) { |time| options[:time_in] = time }
  opts.on('-o TIME OUT', '--out TIME OUT', /^[0-2]\d:[0-5]\d$/) { |time| options[:time_out] = time }
  opts.on('-d DATE', '--date DATE', /^\d{2}-\d{2}-\d{4}$/) { |date|  options[:date] = date }
  opts.on('-f DATE', '--final DATE', /^\d{2}-\d{2}-\d{4}$/) { |date| options[:final] = date }
  opts.on('-u USER', '--user USER') { |user| options[:user] = user }
  opts.on('-p PASSWORD', '--password PASSWORD') { |password| options[:password] = password }
end

option_parser.parse!
time_in = options.key?(:time_in) ? options[:time_in] : options[:default_time_in]
time_out = options.key?(:time_out) ? options[:time_out] : options[:default_time_out]
date = options.key?(:date) ? options[:date] : Time.now.strftime('%d-%m-%Y')
final = options.key?(:final) ? options[:final] : date

unless options.key?(:user)
  puts 'User must be specified'
  exit(1)
end

unless options.key?(:password)
  puts 'Password must be specified'
  exit(1)
end

holidays = Holidays.new(options[:personal_holidays_filename])
driver = create_driver(options.key?(:headless))

rescue_exceptions do
  login(driver, options)
  Date.parse(date).upto(Date.parse(final)) do |entry|
    fmt_entry = entry.strftime('%d-%m-%Y')
    next if entry.saturday? || entry.sunday? || !holidays.is_working_day(fmt_entry)

    create_entry(driver, fmt_entry, time_in, options)
    create_entry(driver, fmt_entry, time_out, options)
  end
end

driver.quit
